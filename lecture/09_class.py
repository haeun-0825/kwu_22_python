# Class
#   - 객체: 실세계에 존재하는 것을 속성과 동작으로 표현하는 것
#   - 속성: 변수
#   - 동작: 함수

# 우체부 → 객체
# Class: 우체부
#   ㄴ 변수1: 배달할 물품
#   ㄴ 변수2: 주소
#   ㄴ 함수1: 배달한다()
#   ㄴ 함수2: 회수한다()
#   ㄴ 함수3: 이동한다()

# Web, App → Java → Spring(전자정부 3.0)(한 번 만든 기능들을 반복해서 씀 + 확장해서 씀 => 그래서 객체지향이 필수이다.)
# AI, 데이터 분석 → Python(코드 재활용 별로 안함 => 쓰긴 쓰는데 굳이 클래스를 사용하진 않음)

# 1. Class작성: 객체의 설계 도면                         => 힐스테이트 아파트 도면
# 2. 객체생성: 인스턴스(=만들어진 객체) 생성!(을 해야 한다)  => 힐스테이트 수완(=인스턴스) 짓기, 힐스테이트 첨단
#   ㄴ 생성자 함수() → 모든 Class는 반드시 1개 이상의 생성자 함수 보유
#   ㄴ 생성자 함수를 선언하지 않은 경우 자동으로 Default 생성자() 생성
# 3. 객체사용: 인스턴스 사용!                            => 입주
# * 동일한 Class로 생성된 인스턴스들은 서로 다른 객체(힐스테이트 수완과 힐스테이트 첨단은 같은 도면(클래스)으로 만들었어도 서로(인스턴트) 다름)로 인식 *

# 1. Class
class Test:  # 파스칼, 콜론/들여쓰기 범위가 블록
    # 언더바(_) 2개 => 생성자 함수
    # JAVA(This) == Python(Self)
    # Python은 클래스에 포함된 모든 함수들의 첫 번째 매개변수로 self 사용(안쓰면 에러)
    def __init__(self):  # 생성자가 없어도 디폴트 생성자가 생성됨
        print("Hello Class")
# 함수끼리는 띄워줘야 함. 클래스 내에는 한줄, 클래스 밖에는 두줄
    # 일반 함수    
    def print_name(self, name: str):
        print(f"Hello {name}")
        
# 2. 객체생성        
# Test() → 생성자 함수
# test → 인스턴스
test = Test()

# 3. 객체사용
test.print_name("체리")
